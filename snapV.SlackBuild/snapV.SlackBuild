#!/bin/bash

# Slackware build script for snap-slackware

# Copyright 2024 Anagnostakis Ioannis GR
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'


if [ "$EUID" -eq 0 ]; then
    echo -e "${RED}snap-slackware should not be build, install, uninstall, run, etc... with root privileges.${NC} Exiting."
    exit 1
fi

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=snapV
VERSION=${VERSION:-1.0.beta}
BUILD=${BUILD:-3}
TAG=${TAG:-_snap}
PKGTYPE=${PKGTYPE:-txz}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/$CWD/SNAP_BUILD}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-$CWD}


if [ "$ARCH" = "x86_64" ]; then
  echo -e "${YELLOW} $ARCH found.${NC} Good news..."
else
  echo -e "${RED} $ARCH is not supported.${NC} Exiting..."
  exit 1
fi


set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar -xf $CWD/$PRGNAM-$VERSION.tar.xz
cd $PRGNAM-$VERSION


IN_DIR=".local/bin"

mkdir -p $PKG/"$IN_DIR"/snapv
install -m 700 snap $PKG/"$IN_DIR"/
mv snapv/* -t $PKG/"$IN_DIR"/snapv/
chmod -R 755 "$PKG"/"$IN_DIR"/snapv/snaps


mkdir -p $PKG/$IN_DIR/snapv/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/$IN_DIR/snapv/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
cat $CWD/slack-desc > $PKG/$IN_DIR/snapv/doc/$PRGNAM-$VERSION/slack-desc



cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE


echo "" 
echo -e "${YELLOW}To install or upgradpkg${NC} ${BLUE} $PRGNAM ${NC} ${YELLOW}use following command always as user:${NC}"
echo -e "${GREEN}     tar -xf $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE -C ~/${NC}"
echo ""
echo -e "${RED}To removepkg you can use one of the following commands always as user: ${NC}"
echo -e "${GREEN}    snap uninstall ${NC}"
echo "                 OR        "
echo -e "${GREEN}   .~/$IN_DIR/snapv/scripts/uninstall-snap.sh ${NC}"
echo  ""












